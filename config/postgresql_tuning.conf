# PostgreSQL Performance Tuning Configuration
# Optimized for: 128GB RAM, 16 CPU cores, SSD storage
# Target workload: Large data processing, analytics, bulk inserts

# CONNECTIONS
# ===========
max_connections = 200                   # Moderate connections for app + ETL
superuser_reserved_connections = 5      # Reserved for maintenance

# MEMORY SETTINGS
# ===============
# Total RAM: 128GB, allocating ~75% for PostgreSQL (96GB)

shared_buffers = 32GB                   # 25% of RAM for shared memory
effective_cache_size = 96GB             # 75% of RAM (OS + PG cache estimate)
maintenance_work_mem = 8GB              # For VACUUM, CREATE INDEX, ALTER TABLE
work_mem = 512MB                        # Per sort/hash operation (be careful!)
wal_buffers = 128MB                     # Write-ahead log buffers
temp_buffers = 256MB                    # Per session temporary buffers

# QUERY PLANNER
# =============
random_page_cost = 1.1                  # SSD storage (default 4.0 for HDD)
effective_io_concurrency = 200          # SSD can handle many concurrent I/O
parallel_setup_cost = 100               # Lower than default to encourage parallelism
parallel_tuple_cost = 0.01              # Lower than default
max_parallel_workers_per_gather = 8     # Half of CPU cores
max_parallel_maintenance_workers = 8    # For parallel index creation
max_parallel_workers = 16               # Total CPU cores
max_worker_processes = 16               # Must be >= max_parallel_workers

# WRITE PERFORMANCE
# =================
checkpoint_completion_target = 0.9      # Spread checkpoint I/O
wal_compression = on                    # Compress WAL files
max_wal_size = 8GB                      # Larger for bulk operations
min_wal_size = 2GB                      # Keep more WAL around
checkpoint_timeout = 15min              # Less frequent checkpoints
synchronous_commit = on                 # Can set to 'off' for better performance

# LOGGING & MONITORING
# ====================
log_min_duration_statement = 1000       # Log slow queries (>1 second)
log_checkpoints = on                    # Monitor checkpoint performance
log_connections = on                    # Track connections
log_disconnections = on                 # Track disconnections
log_temp_files = 0                      # Log all temp file usage
log_autovacuum_min_duration = 0        # Log all autovacuum runs

# STATISTICS
# ==========
track_activities = on                   # Enable pg_stat_activity
track_counts = on                       # Enable statistics collection
track_io_timing = on                    # Track I/O timing (small overhead)
track_wal_io_timing = on               # Track WAL I/O timing
track_functions = all                   # Track function statistics
stats_temp_directory = '/tmp'           # Use faster storage for stats

# AUTOVACUUM
# ==========
autovacuum = on                         # Enable autovacuum
autovacuum_max_workers = 8              # Parallel vacuum workers
autovacuum_naptime = 30s                # Check every 30 seconds
autovacuum_vacuum_scale_factor = 0.1    # Vacuum at 10% dead tuples
autovacuum_analyze_scale_factor = 0.05  # Analyze at 5% changes
autovacuum_vacuum_cost_limit = 2000     # Higher than default for faster vacuum

# BULK LOADING OPTIMIZATIONS
# ==========================
# Consider these during bulk inserts:
# SET LOCAL synchronous_commit = OFF;
# SET LOCAL wal_level = minimal;
# SET LOCAL archive_mode = OFF;
# SET LOCAL max_wal_senders = 0;